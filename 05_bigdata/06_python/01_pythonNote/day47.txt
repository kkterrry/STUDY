day47
- 비교연산자
  - &,| : 비트연산한다
  - and 연산자 : 거짓으로 판별되는 첫번째 항의 결과 반환
                     모든 항이 참이면 마지막 항의 결과 반환
  - or 연산자 : 참으로 판별되는 첫번째 항의 결과 반환
                   모든 항이 거짓이면 마지막 항의 결과 반환
- 문자열 다루기
  - title() 각 단어의 앞글자만 대문자로
  - find('찾을 문자열') '찾을 문자열'이 왼쪽부터 시작하여 몇번째 indexm에 있는지 index를 반환
  - rfind('찾을 문자열') '찾을 문자열'이 오른쪽부터 시작하여 몇번째 있는지 index를 반환 ('찾을 문자열'이 없으면 -1을 반환)
  - startswith('특정문자열') '특정문자열'로 시작하는지 여부 반환
  - endswith('특정문자열') '특정문자열'로 끝나는지 여부 반환

- 리스트
  - append() 요소 맨 뒤에 추가
  - extend() 리스트를 요소별로 맨 뒤에 추가
  - insert(idx, 값) : idx번째 인덱스에 값 추가
  - 리스트 슬라이싱
    - 변수[::-1]: 역으로 출력
  - 람다식
    - [변수 for 변수 in numbers if 조건식]
  - 삭제하기
    - pop() : 가장 마지막 인덱스가 요소가 반환되고 삭제
    - pop(n) : n번째 idx요소가 반환되고 삭제
    - remove(data) : 해당 data가 삭제
    - del 리스트 변수.[n]. : n번째 index 요소가 삭제
  - 정렬하기
    - numbers.sort(): 오름차순 정렬
    - numbers.sort(reverse=True)  #내림차순 정렬
  - 복제
    - city.copy()
- 튜플
    - '-'.join(city) 구분자 기준 변수내용 연결
    - index(), count()
    - 변수 * 3 => 변수 변수 변수
- 딕셔너리
    - 변수.keys() : 키목록
    - 변수.values() : 값들
    - 변수.items() : 튜플로 이루어진 값들
    - for item in my_dic.items():
           print("{}은 {}".format(item[0],item[1]))



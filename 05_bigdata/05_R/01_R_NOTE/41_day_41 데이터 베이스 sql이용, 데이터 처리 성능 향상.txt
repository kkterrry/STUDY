* 데이터 정제하기
1. 결측치 정제하기
  - apply(is.na(df), 2, sum) # 열별 결측치 갯수
  - colSums(is.na(df)) # 열별 결측치 갯수
  - na.omit(df) # 결측치가 하나의 열이라도 있으면 그행은 모두 제거.
- 결측치 대체(중앙값, 평균값)
  - colSums(is.na(exam)) # 열별 결측치 확인
  - exam$math <- ifelse(is.na(exam$math), round(median(exam$math, na.rm=T)), exam$math)
  - table(is.na(exam)) # 결측치 확인
- 결측치 처리 방법1
  - exam <- within(exam, { # 결측치 대체를 위한 블록
    math    <- ifelse(is.na(math), m['math'], math)
    english <- ifelse(is.na(english), m['english'], english)
    science <- ifelse(is.na(science), m['science'], science)
    })
- 결측치 처리방법2
  - exam <- exam %>% 
    mutate(
    math = ifelse(is.na(math), m['math'], math),
    english = ifelse(is.na(english), m['english'], english),
    science = ifelse(is.na(science), m['science'], science)
    )
2. 이상치 정제하기
  - 논리적이상치
  - 극단적인 이상치(정상범위 기준에서 벗어난 값)
    - result <- boxplot(mpg$hwy)$stats
    - result[1] # 하향극단치 경계
    - result[5] # 상향극단치 경계계
    - mpg$hwy[mpg$hwy>result[5]] # 상향극단치보다 큰값 : 44 41
    - mpg$hwy[mpg$hwy<result[1]] # 하향극단치보다 작은값 : 없음

* 데이터 베이스 및 SQL 이용
이장의 내용 : SQL문으로 데이터프레임과 DB(oracle, mySql) 테이블을 이용
install.packages("sqldf")
library(sqldf) # sqldf() 함수를 통해 데이터프레임을 DB의 테이블 처럼 사용
- sqldf("SQL문")

- 오라클 데이터 베이스 연결 
# 전작업 : ojdbc6.jar이용하므로 자바설치 -> 환경변수설정(JAVA_HOME)
getwd() # 작업디렉토리에 ojdbc6.jar를 복사해 둠
# 패키지 설치 및 로드 : RJDBC
install.packages("RJDBC")
require(RJDBC)
# 드라이버 클래스 로드
drv <- JDBC("oracle.jdbc.driver.OracleDriver", classPath = "ojdbc6.jar")
drv
# 데이터 베이스 연결
conn <- dbConnect(drv, "jdbc:oracle:thin:@127.0.0.1:1521:xe","scott","tiger")
conn
# SQL문 전송 + 결과 받기 
rs <- dbSendQuery(conn, "select * from emp")
emp <- fetch(rs, n=-1)
class(emp)
head(emp)
# SQL문 전송 + 결과 받기를 한꺼번에 하는 방법
dept <- dbGetQuery(conn, "select * from dept")
dept
# 테이블 전체 데이터 조회
dept <- dbReadTable(con,"dept")
dept

# DB 데이터 수정 SQL 전송(update, insert, delete)
dbSendUpdate(conn, "insert into dept values (50, 'it', 'Seoul')")
dbSendUpdate(conn, "update dept set loc='PUSAN' where deptno=50")
dbSendUpdate(conn, "delete from dept where deptno=50")

# 데이터 연결 해제
dbDisconnect(conn)
# 드라이버 언로드 : DB연결해제 자동으로 언로드됨
dbUnloadDriver(drv)
# RJDBC 패키지 언로드
detach("package:RJDBC", unload = TRUE)

- MySQL 데이터 베이스 연결 
# 전작업 : 외부에서 엑세스 허용
# MySQL Workbench에서 
# ALTER USER '아이디'@'localhost' IDENTIFIED WITH mysql_native_password BY '비밀번호';
# ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mysql';

install.packages("RMySQL")
library(RMySQL)
# 드라이버 로드
drv <- dbDriver("MySQL")
drv
# 데이터베이스 연결
conn <- dbConnect(drv, host="127.0.0.1", dbname="kimdb", user="root", password="mysql")
conn
# SQL전송+결과받기
rs <- dbSendQuery(conn, "select * from personal")
personal <- fetch(rs, n=-1)
personal
# SQL전송과 결과 받기를 한꺼번에
division <- dbGetQuery(conn, "select * from division")
division
# 테이블 전체 데이터를 한꺼번에 조회
person <- dbReadTable(conn, "personal")
person
# 데이터 베이스 연결 해제
dbDisconnect(conn)
# 드라이버 언로드
dbUnloadDriver(drv)
detach("package:RMySQL", unload = TRUE)

* 데이터 처리 성능 향상
- plyr 패키지
install.packages("plyr")
library(plyr)
# summarise : 명시된 변수들만 출력
# transform : 기존의 iris뒤에 명시된 변수가 추가되서 출력
ddply(.data=iris, .(Species), function(group){
  data.frame(SL.mean=mean(group$Sepal.Length),
             SW.mean=mean(group$Sepal.Width))
})
- 데이터 구조 변경 (melt, cast함수)
열 이름과 값을 variable, value 열에 저장된 형태로 변환하는
함수를 제공
  - dcast: melt( )된 데이터(molten data)를 측정치를 컬럼으로 나열한 데이터 프레임으로 변환한다.
install.packages("reshape2")
library(reshape2)
airquality.melt <- melt(airquality, id=c('Month','Day'), value.name = "val")
head(airquality.melt)
  - acast:   dcast는 data.frame 형식으로 리턴하지만 acast는 3차원 배열 형태로 리턴한다.














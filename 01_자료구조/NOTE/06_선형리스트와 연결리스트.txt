<7일차>
순차자료구조
	- 메모리의 저장 시작위치부터 빈 자리 없이 자료를 순서대로 연속해서 저장. 논리적인 순서와 물리적인 순서가 일치하는 구현방식
	- 배열을 이용하여 구현

연결자료구조
	- 메모리에 저장된 물리적인 순서와 논리적인 순서 위치와 상관없이 링크에 의해서 논리적인 순서를 표현
	- 포인터를 이용하여 구현

선형리스트의 문제점
	- 삽입할 자리를 만들기 위한 지리 이동횟수
	  : (n+1)개의 원소로 이루어진 선형리스트에서 k번 자리에 원소를 삽입하는 경우
	  -> 이동횟수 = n-(k+1)+1 = n-k = 마지막 원소의 인덱스 - 삽입할 자리의 인덱스

	- 삭제후 빈자리 채우기 위한 자리 이동횟수
	  : (n+1)개의 원소로 이루어진 선형리스트에서 k번째 원소를 삭제하는 경우
	  -> 이동횟수 -= n-(k+1)+1 = n - k = 마지막원소의 인덱스 - 삽입할 자리의 인덱스

선형리스트의 물리적 저장 위치
	- 1차원 배열
	  : 배열의 시작주소 base + (인덱스 * 4바이트)

	- 2차원 배열
	  : 행의 갯수가 ni이고, 열의 갯수가 nj인 2차원 배열 a[ni][nj]의 시작주소가 base이고 원소의 길이가 l일때,
	    i행 j열의 원소. 즉 a[i][j]의 위치
		- 행 우선 법칙
		  : base + (i*nj+j)*l
		- 열 우선 법칙
		  : base + (j*ni+i)*l

	- 3차원 배열
	  : 면의 갯수가 ni이고, 행의 갯수가 nj이고, 열의 갯수가 nk인 3차원배열 a[ni][nj][nk], 시작주소가 base이고, 원소의 길이가 l일때,
	    i면 j행 k열 원소. 즉, a[i][j][k]의 위치
		- 면우선
		  : base + {(i*nj*nk)+(j*nk)+k}*l

		- 열우선
		  : base + {(k*nj*ni)+(j*ni)+i}*l

연결자료구조
	- 노드 : 하나의 원소를 표현하기 위한 단위구조

	- 삽입연산
	  1. 삽입할 노드 준비
	  2. 새 노드의 데이터 필드에 값을 저장
	  3. 새 노드의 링크값을 지정
	  4. 리스트의 앞 노드에 새 노드를 연결

	- 알고리즘

원형 연결리스트

이중 연결리스트
	- 노드 삽입 방법
	  1. 삽입할 노드 준비
	  2. 새 노드의 데이터 필드에 값을 저장
	  3. 새 노드의 왼쪽 노드의 오른쪽 링크 필드(rlink)에 있던 값을 새 노드의 오른쪽 링크필드에 저장
	  4. 왼쪽 노드의 오른쪽 링크필드에 새노드의 주소를 저장
	  5. 새노드 오른쪽 노드의 왼쪽 링크필드에 있던 값을 새 노드 왼쪽 링크필드에 저장
	  6. 오른쪽 노드의 왼쪽 링크필드에 새노드의 주소를 저장
	  7. 노드를 순서대로 연결

	- 알고리즘

	- 노드 삭제 방법
	  1. 삭제할 노드의 오른쪽 노드와 왼쪽 노드를 찾는다.
	  2. 삭제할 노드의 오른쪽 노드의 주소(old.rlink)를 삭제할 노드의 왼쪽 노드(old.llink)의 오른쪽 링크필드에 저장
	  3. 삭제할 노드의 왼쪽노드(old.llink)의 주소를 삭제할 노드의 오른쪽 노드(old.rlink)의 왼쪽 링크필드에 저장
	  4. 순서대로 연결
	
	 - 알고리즘
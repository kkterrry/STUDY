<3일차>
- 프로그램의 메모리 구조
  1. code 영역
	- 기계어로 번역된 코드가 저장되는 영역
	- 함수가 정의된 영역
  2. data 영역
	- 전역변수 및 static 변수가 저장되는 영역
	- 공간의 생성 및 소멸시기를 결정할 수 없다.
  3. stack 영역
	- 지역변수 및 매개변수가 저장되는 영역
	- 함수의 호출 및 종료를 담당하는 영역
	- 공간의 생성 및 소멸시기를 결정할 수 없다.
  4. heap 영역
	- 프로그램 실행중에 사용자가 필요에 의해 공간을 생성하고 소멸시키는 영역

- 동적할당
	- 프로그램 실행중에 사용자에 필요에 의해 공간을 생성하고 소멸시키는 작업
	- 힙영역에서 작업된다.
	- 동적할당된 공간은 포인터를 통해 제어해 줘야한다.
	- C표준함수를 통해 동적할당 및 소멸작업을 해준다.
	- 프로그램이 종료되어도 동적할당된 공간은 소멸되지 않기 때문에 반드시
	  사용후에는 동적할당 해제 작업을 해줘야 한다.
	- int 생성
	  int* pt = (int*)malloc(sizeof(int));

	- double 생성
	  double* pt = (double*)malloc(sizeof(double));

	- char 생성
	  char* pt = (char*)malloc(sizeof(char));

	- 문자열 생성
	  char* pt = (char*)malloc((strlen("문자열")+1)sizeof(char));

	- 구조체 생성
	  구조체* pt = (구조체*)malloc(sizeof(구조체));

	- free(해제할 공간의 주소)

- 구조체
	- 사용자 정의 자료형
	- 다른 성격의 데이터들을 보다 쉽게 관리하기 위해 정의한 자료형
	- 구조체 선언은 메모리 할당이 되지 않은 상태

	- 구조체 정의
	- struc 구조체명{
		멤버필드 정의
		- 변수, 배열, 포인터 선언하듯
		- 자기자신과 같은 형태의 변수, 배열은 멤버필드로 정의 x
		  단) 자기자신을 가리키는 포인터는 정의할 수 있다.(자기 참조 구조체)
	  }	
	- 구조체 내부 변수 접근방법
		변수->내부변수
		변수.내부변수